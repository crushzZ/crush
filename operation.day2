./configure  --help   列出所有选项，查看各种模块
--with-模块


LNMP （linux，nginx,mysql,php）动态网站
mysql=mariadb
php,python,perl


LNMP常见问题：（支持正则表达式）
1.出现下载页面（动静分离没成功或没做）
2.An error occurred.(日志Connection  refused)
     nginx日志：tailf  /usr/local/nginx/logs/error.log
3.页面出现空白页（没有提示看日志,可能是php脚本错误）
    php-fpm日志：tailf  /var/log/php-fpm/www-error.log
4.File  not  found (没有页面文件)

LNMP  linux--ningix--PHP--Mysql(Mariadb)
有数据需要存储--->txt.doc,excel,mysql


静态网站（图片）：html，txt，doc，jpg，mp3，mp4
动态网站 ：shell（a.sh：date）代码不能直接给用户，代码需要在服务器执行一次
            a.sh---->bash
            a.php---->php
            a.jsp---->java
client------------->nginx : 走httpd协议一个共享
                      /usr/local/nginx
amb：//ip---------->samba[/common]走的是共享目录
ftp://ip----------->ftp:[/var/ftp/]走的是共享目录

nginx动静分离（nginx最后实现动静分离）

client------>nginx----->php(解释器)
             if判断，如果用户访问的是静态页面，则直接返回
             if判断，如果用户访问的是动态页面php$，则转发给php
                 php负责执行代码，并把结果给nginx
                  nginx把结果给用户
看到的结果是  date  2018-02-01  14：25   用户看到的是 2018-02-01  14:25

location匹配用户的地址栏（判断），支持正则
location  / {  /可以匹配所有
}

location  /a {
	deny  1.1.1.1;
	allow  all;
}
location  /b {
	deny	all;
}
location  /c {
	allow	all;
}
客户访问
firefox  http://www.a.com/
firefox  http://www.a.com/a (如果是1.1.1.1不能访问，如果不是都可以访问)
firefox  http://www.a.com/b  拒绝所有访问
firefox  http://www.a.com/b  允许所有访问

php的主配置文件
 /etc/php-fpm.d/www.conf
注释行是分号

  
以-devel结尾的都是依赖包
php默认无法链接mysql 
步骤一：安装软件

[root@Proxy ~]# yum  -y  install  mariadb  mariadb-server   mariadb-devel  php  php-mysql
[root@Proxy ~]# cd  /root/lnmp_soft/
[root@Proxy lnmp_soft]# ls
php-fpm-5.4.16-42.el7.x86_64.rpm
[root@Proxy lnmp_soft]# cat  /etc/redhat-release 
Red Hat Enterprise Linux Server release 7.4 (Maipo)
确定是7.4版本直接装包
[root@Proxy lnmp_soft]# rpm  -ivh  php-fpm-5.4.16-42.el7.x86_64.rpm 


【在什么都没有的情况下，需要
使用yum安装基础依赖包
[root@proxy ~]# yum -y install gcc openssl-devel pcre-devel zlib-devel
[root@proxy ~]# useradd –s /sbin/nologin  nginx
[root@proxy ~]# tar -zxvf nginx-1.12.2.tar.gz
[root@proxy ~]# cd nginx-1.12.2
[root@proxy nginx-1.12.2]# ./configure --user=nginx   --group=nginx 
[root@proxy ~]# make && make install】
 
[root@Proxy lnmp_soft]# systemctl start  mariadb
[root@Proxy lnmp_soft]# cd  /usr/local/nginx/html/
[root@Proxy html]# vim  test.php
<?php
$i=33;
echo  $i; 
?>
[root@Proxy html]# php  test.php
33
或
<?php
$i=33;
$y=44;
if($i<$y){
   echo  "OK";
}
else{
echo  "error";
}
?>

步骤二：启动服务

启动Nginx服务
【需要注意的是，如果服务器上已经启动了其他监听80端口的服务软件（如httpd），则需要先关闭该服务，否则会出现冲突
[root@proxy ~]# systemctl stop httpd     如果该服务存在则关闭该服务
[root@proxy ~]# /usr/local/nginx/sbin/nginx     启动Nginx服务
[root@proxy ~]# netstat -utnlp | grep :80】

[root@proxy ~]# systemctl restart mariadb
[root@proxy ~]# systemctl enable mariadb
[root@proxy ~]# systemctl start php-fpm
[root@proxy ~]# systemctl status php-fpm
[root@proxy ~]# systemctl enable php-fpm

[root@Proxy html]# vim  /etc/php-fpm.d/www.conf 
[www]
12行 listen = 127.0.0.1:9000            PHP端口号
70行 pm.max_children = 32               最大进程数量
75行 pm.start_servers = 15              最小进程数量
80行 pm.min_spare_servers = 5           最少需要几个空闲着的进程
85行 pm.max_spare_servers = 32          最多允许几个进程处于空闲状态
[root@proxy ~]# systemctl restart php-fpm
[root@proxy ~]# systemctl status php-fpm


动静分离
	location / {
		root  html;
	}
	location ~ \.php$ {  找.php结尾的
		root   html;
	转发给127.0.0.1:9000；
	}

firefox  http://192.168.4.5/a.html
firefox  http://192.168.4.5/a.doc

[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
location / {
root   html;
            index  index.php  index.html   index.htm;
        }
67行 location ~ \.php$ {
71删除       root           html;
            fastcgi_pass （转发） 127.0.0.1:9000;
            fastcgi_index  index.php;
            include        fastcgi.conf;
        }       
[root@proxy ~]# /usr/local/nginx/sbin/nginx -s reload
客户端测试c.com/test.php弹出方框，就代表没有成功


创建PHP测试页面,连接并查询MariaDB数据库
[root@Proxy ~]# cd  /root/lnmp_soft/php_scripts/
[root@Proxy php_scripts]# cp  mysql.php  /usr/local/nginx/html/
[root@Proxy php_scripts]# ls  /usr/local/nginx/html/
\  50x.html  index.html  mysql.php  test.php
[root@proxy ~]# vim /usr/local/nginx/html/test.php
<?php
$mysqli = new mysqli('localhost','root','密码','mysql'); 注意：root为mysql账户名称，密码需要修改为实际mysql密码，无密码则留空即可
if (mysqli_connect_errno()){
    die('Unable to connect!'). mysqli_connect_error();
}
$sql = "select * from user";
$result = $mysqli->query($sql);
while($row = $result->fetch_array()){
    printf("Host:%s",$row[0]);
    printf("</br>");
    printf("Name:%s",$row[1]);
    printf("</br>");
}
?>
客户端使用浏览器访问服务器PHP首页文档，检验是否成功：
[root@client ~]# firefox http://192.168.4.5/test1.php

案例3：地址重写(地址栏重写)
1.文件被删除，移动
2.域名修改了  www.360buy.com--->www.jd.com(访问360直接跳到jd)
3.路径比较深

所有访问a.html的请求，重定向到b.html;
所有访问192.168.4.5的请求重定向至www.tmooc.cn；
所有访问192.168.4.5/下面子页面，重定向至www.tmooc.cn/下相同的页面；
实现firefox与curl访问相同页面文件，返回不同的内容

Nginx服务器的地址重写，主要用到的配置参数是rewrite：
rewrite  regex   replacement flag
          旧的地址栏      新的地址栏

修改主配置文件
[root@Proxy php_scripts]# vim  /usr/local/nginx/conf/nginx.conf
47行下面加入  rewrite  /a.html   /b.html;
server {
        listen       80;
        server_name  www.a.com;
location / {
            root   html;
            index    index.html index.htm;
        rewrite  /a.html   /b.html;
        }

[root@Proxy php_scripts]# nginx  -s  reload
在网站的根下弄一个b.html页面
[root@Proxy php_scripts]# cd  /usr/local/nginx/html/
[root@Proxy html]# ls
\  50x.html  index.html  mysql.php  test.php
[root@Proxy html]# echo  bbbbbb  >  b.html
客户端测试
[root@Client ~]# firefox  192.168.4.5/a.html  出现的是b页面的内容

访问a.html重定向到b.html（跳转地址栏）
修改Nginx服务配置
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
 server {
        listen       80;
        server_name  www.a.com;
location / {
            root   html;
            index    index.html index.htm;
        rewrite  /a.html   /b.html   redirect;
        }             正则表达式,可以随意改，eg:/abc 也可以转换成b.html
}
[root@Proxy php_scripts]# nginx  -s  reload  再重新加载
客户端测试
[root@Client ~]# firefox  192.168.4.5/a.html  出现的是b页面的内容
     会发现页面名字从a.html变成b.html

修改配置文件(访问192.168.4.5的请求重定向至www.tmooc.cn)
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
server {
        listen       80;
        server_name  www.a.com;
rewrite ^/ http://www.tmooc.cn/; 只要访问的页面是根开始，就跳到这个页面，连网的情况下可以跳到任何位置
location / {
    root   html;
index  index.html index.htm;
# rewrite /a.html  /b.html  redirect; 把刚写的注释掉
}
}
[root@Proxy html]# nginx  -s  reload
客户端测试，必须是真实机！！！！

修改配置文件(访问192.168.4.5/下面子页面，重定向至www.tmooc.cn/下相同的页面)
正则表达式（保留）
\(111q\)\(fffmj\)   \1   \2

[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
server {
        listen       80;
        server_name  www.a.com;
rewrite ^/(.*) http://www.tmooc.cn/$1;  $1必须是一个链接
location / {
    root   html;
index  index.html index.htm;
# rewrite /a.html  /b.html  redirect;
}
}
[root@proxy ~]# nginx  -s  reload


UC----->设置------->浏览设置------->UA(用户标识)：电脑，手机

修改配置文件(实现curl和火狐访问相同链接返回的页面不同)

创建网页目录以及对应的页面文件
准备工作：
[root@Proxy html]# echo  正常页面  >  /usr/local/nginx/html/test.html        电脑使用的页面
[root@Proxy html]# mkdir  -p  /usr/local/nginx/html/firefox
[root@Proxy html]# echo   firefox   >  /usr/local/nginx/html/firefox/test.html    手机使用的页面

修改配置文件

[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
server {
        listen       80;
        server_name  localhost;
location / {
    root   html;
index  index.html index.htm;
}                                    
if ($http_user_agent ~* firefox) {      识别客户端firefox浏览器
                     ~ : 正则  *：不区分大小写
rewrite ^(.*)$ /firefox/$1 break;  break可加可不加
}               $：可有可无
}

[root@proxy ~]# nginx  -s  reload
真机访问 ：
[root@room9pc01 ~]# curl  http://192.168.4.5/test.html
正常页面
[root@room9pc01 ~]# firefox  http://192.168.4.5/test.html
firefox

正则表达式的匹配模式
~     区分大小写匹配
~*    不区分大小写匹配
!~    区分大小写不匹配
!~*   不区分大小写不匹配
















